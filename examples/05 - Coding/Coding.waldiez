{"type":"flow","name":"Coding","description":"Coding and Financial Analysis","tags":[],"requirements":["yfinance","matplotlib","pandas"],"storageId":"id-30011f5a-f1f2-436f-8f35-0b13b4a9a6eb","createdAt":"2024-11-19T18:47:49.689Z","updatedAt":"2024-11-19T18:47:49.894Z","data":{"nodes":[{"id":"wm-x_v9eRZR4e9EB_IsgHDBR","type":"model","position":{"x":0,"y":0},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"wa-pvKjS6q_5ZB5kUQIAPv7s","type":"agent","position":{"x":135,"y":390},"hidden":false,"measured":{"width":206,"height":216},"selected":false},{"id":"wa-TI_QKfoWBUfo3wM81GOv-","type":"agent","position":{"x":600,"y":315},"hidden":false,"measured":{"width":206,"height":233},"selected":false},{"id":"ws-sKToUpnsHKAV7jglab1Te","type":"skill","position":{"x":0,"y":0},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"ws-QNNL0dh3pKBc65XAzX9nD","type":"skill","position":{"x":240,"y":0},"measured":{"width":182,"height":182},"selected":false,"hidden":true}],"edges":[{"id":"we-Rh2DuT-UXGJR9-5xYYFpT","source":"wa-pvKjS6q_5ZB5kUQIAPv7s","target":"wa-TI_QKfoWBUfo3wM81GOv-","type":"chat","animated":false,"selected":false,"style":{"stroke":"#bc76f5","strokeWidth":3},"markerEnd":{"type":"arrowclosed","color":"#bc76f5","width":10,"height":10},"hidden":false}],"viewport":{"x":298.5,"y":114,"zoom":1},"agents":{"users":[{"id":"wa-pvKjS6q_5ZB5kUQIAPv7s","type":"agent","agentType":"user","name":"Code Executor Agent","description":"Code Executor Agent","tags":[],"requirements":[],"createdAt":"2024-09-27T16:19:27.378Z","updatedAt":"2024-09-28T11:43:24.508Z","data":{"systemMessage":null,"humanInputMode":"ALWAYS","codeExecutionConfig":{"workDir":"coding","timeout":60,"functions":["ws-sKToUpnsHKAV7jglab1Te","ws-QNNL0dh3pKBc65XAzX9nD"]},"agentDefaultAutoReply":"Please continue. If everything is done, reply 'TERMINATE'.","maxConsecutiveAutoReply":10,"termination":{"type":"none","keywords":[],"criterion":null,"methodContent":null},"teachability":{"enabled":false,"verbosity":0,"resetDb":false,"recallThreshold":0,"maxMumRetrievals":0},"modelIds":[],"skills":[],"parentId":null,"nestedChats":[]}}],"assistants":[{"id":"wa-TI_QKfoWBUfo3wM81GOv-","type":"agent","agentType":"assistant","name":"Code Writer Agent","description":"Code Writer Agent","tags":[],"requirements":[],"createdAt":"2024-09-27T16:20:43.776Z","updatedAt":"2024-10-28T20:10:37.869Z","data":{"systemMessage":null,"humanInputMode":"NEVER","codeExecutionConfig":false,"agentDefaultAutoReply":null,"maxConsecutiveAutoReply":null,"termination":{"type":"none","keywords":[],"criterion":null,"methodContent":null},"teachability":{"enabled":false,"verbosity":0,"resetDb":false,"recallThreshold":0,"maxMumRetrievals":0},"modelIds":["wm-x_v9eRZR4e9EB_IsgHDBR"],"skills":[{"id":"ws-sKToUpnsHKAV7jglab1Te","executorId":"wa-pvKjS6q_5ZB5kUQIAPv7s"},{"id":"ws-QNNL0dh3pKBc65XAzX9nD","executorId":"wa-pvKjS6q_5ZB5kUQIAPv7s"}],"parentId":null,"nestedChats":[]}}],"managers":[],"rag_users":[]},"models":[{"id":"wm-x_v9eRZR4e9EB_IsgHDBR","type":"model","name":"gpt-3.5-turbo","description":"OpenAI GPT-3.5","tags":[],"requirements":[],"createdAt":"2024-10-28T07:23:33.793Z","updatedAt":"2024-10-28T20:24:34.993Z","data":{"apiKey":"REPLACE_ME","apiType":"openai","baseUrl":null,"temperature":null,"topP":null,"maxTokens":null,"defaultHeaders":{},"price":{"promptPricePer1k":null,"completionTokenPricePer1k":null}}}],"skills":[{"id":"ws-sKToUpnsHKAV7jglab1Te","type":"skill","name":"get_stock_prices","description":"Get the stock prices for the given stock symbols between the start and end dates.","tags":[],"requirements":[],"createdAt":"2024-09-27T16:23:01.437Z","updatedAt":"2024-10-28T20:25:56.220Z","data":{"content":"# filename: {get_stock_prices}.py\n\"\"\"Get stock prices.\n\nGet the stock prices for the given stock symbols between  \nthe start and end dates.\n\"\"\"\n\n\ndef get_stock_prices(\n    stock_symbols: str | list,\n    start_date: str,\n    end_date: str,\n):\n    \"\"\"Get the stock prices for the given stock symbols between\n    the start and end dates.\n\n    Args:\n        stock_symbols (str or list): The stock symbols to get the\n        prices for.\n        start_date (str): The start date in the format \n        'YYYY-MM-DD'.\n        end_date (str): The end date in the format 'YYYY-MM-DD'.\n\n    Returns:\n        dict: (pandas.DataFrame.to_dict): The stock prices for the given stock\n        symbols indexed by date, with one column per stock \n        symbol.\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    import yfinance\n\n    stock_data = yfinance.download(\n        stock_symbols, start=start_date, end=end_date\n    )\n    close = stock_data.get(\"Close\")\n    # avoid: Timestamp is not JSON serializable\n    close.index = close.index.date  # Convert the index to date only\n    close.index = close.index.astype(str)  # Convert the index to string\n    return close.to_dict()\n","secrets":{}}},{"id":"ws-QNNL0dh3pKBc65XAzX9nD","type":"skill","name":"plot_stock_prices","description":"Plot the stock prices for the given stock symbols.","tags":[],"requirements":[],"createdAt":"2024-09-27T16:24:36.852Z","updatedAt":"2024-10-28T20:23:47.415Z","data":{"content":"# filename: {plot_stock_prices}.py\n\"\"\"Plot the stock prices for the given stock symbols.\"\"\"\n\n\ndef plot_stock_prices(\n    stock_prices: dict,\n    filename: str,\n):\n    \"\"\"Plot the stock prices for the given stock symbols.\n\n    Args:\n        stock_prices (dict) [dumped pandas.DataFrame]: The stock \n            prices for the given stock symbols.\n        filename (str): The filename to save the plot to.\n\n    Returns:\n        str: \"ok\" if the plot was saved successfully.\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    import matplotlib.pyplot as plt\n    import pandas as pd\n\n    df = pd.DataFrame.from_dict(stock_prices)\n\n    plt.figure(figsize=(10, 5))\n    for column in df.columns:\n        plt.plot(df.index, df[column], label=column)\n    plt.title(\"Stock Prices\")\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Price\")\n    plt.grid(True)\n    # the days are alot, get the xticks every 30 days\n    # plt.xticks(df.index[::30], rotation=45)\n    # give a little space to the plot\n    plt.tight_layout()\n    plt.savefig(filename)\n    return \"ok\"\n","secrets":{}}}],"chats":[{"id":"we-Rh2DuT-UXGJR9-5xYYFpT","data":{"source":"wa-pvKjS6q_5ZB5kUQIAPv7s","target":"wa-TI_QKfoWBUfo3wM81GOv-","name":"Code Executor A => Code Writer Age","order":1,"description":"The code executor asks the code writer to generate a plot with stock prices.","position":1,"clearHistory":false,"maxTurns":null,"message":{"type":"method","use_carryover":false,"content":"\"\"\"Custom message function.\"\"\"\n# provide the message to be sent when the sender and the recipient are connected\n# complete the `callable_message` below. Do not change the name or the arguments of the function.\n# only complete the function body and the docstring and return the:\n# final message: (str) or a dictionary with the final message and additional data (dict)\n#\n# the recipient and the sender are 'autogen.ConversableAgent' objects\n# the context is generated from the sender's initiate_chat additional keyword arguments\n# example:\n# def callable_message(sender, recipient, context):\n#   # type: (ConversableAgent, ConversableAgent, dict) -> Union[str, Dict]\n#   carryover = context.get(\"carryover\", \"\")\n#    if isinstance(carryover, list):\n#        carryover = carryover[-1]\n#    final_msg = \"Write a blogpost.\" + \"\\nContext: \\n\" + carryover\n#    return final_msg\n#\ndef callable_message(sender, recipient, context):\n    \"\"\"Return the task.\"\"\"\n    import datetime  # pylint: disable=import-outside-toplevel\n    today = datetime.datetime.now().date()\n    message = (\n        f\"Today is {today}.\"\n        \"Download the last three months of stock prices YTD for NVDA and TSLA and create\"\n        \"a plot. Make sure the code is in markdown code block and \"\n        \"save the figure to a file stock_prices_YTD_plot.png.\"\n    )\n    return message\n","context":{}},"nestedChat":{"message":null,"reply":null},"summary":{"method":"last_msg","prompt":"","args":{}}}}]}}
