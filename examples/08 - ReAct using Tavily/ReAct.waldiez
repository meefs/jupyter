{"id":"NZDrvjJLeifXbBoWGs0Boy3TsC5wdOMt","type":"flow","storageId":"id-18fd8123-146e-44f6-ba1c-12cabd7cb18f","name":"ReAct","description":"ReAct using Tavily","tags":["ReAct","Tavily"],"requirements":["tavily-python"],"createdAt":"2025-01-30T09:00:39.919Z","updatedAt":"2025-01-30T09:00:45.971Z","data":{"nodes":[{"id":"wm-bCOT_M9N0_CI88GQBvLjt","type":"model","position":{"x":0,"y":10},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"ws-Y5Igwe6Cpfg5yS9TfeA7h","type":"skill","position":{"x":0,"y":10},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"wa-PHrGKn4IzWMvZ7pKpsNMr","type":"agent","position":{"x":120,"y":255},"hidden":false,"measured":{"width":206,"height":214},"selected":false,"dragging":false},{"id":"wa-374KHGuzTzE79ekjB1z7f","type":"agent","position":{"x":660,"y":135},"hidden":false,"measured":{"width":211,"height":215},"selected":false,"dragging":false}],"edges":[{"id":"we-l-SjEIQ_ikUhQpuXaJkuL","source":"wa-PHrGKn4IzWMvZ7pKpsNMr","target":"wa-374KHGuzTzE79ekjB1z7f","hidden":false,"animated":false,"selected":false,"style":{"stroke":"#bc76f5","strokeWidth":3},"markerEnd":{"type":"arrowclosed","color":"#bc76f5","width":10,"height":10},"sourceHandle":"agent-handle-right-source-wa-PHrGKn4IzWMvZ7pKpsNMr","targetHandle":"agent-handle-left-target-wa-374KHGuzTzE79ekjB1z7f","type":"chat"}],"viewport":{"x":643,"y":102.5,"zoom":1},"agents":{"users":[{"type":"agent","name":"User","description":"A user proxy agent","tags":[],"requirements":[],"createdAt":"2024-09-27T16:47:26.308Z","updatedAt":"2024-09-28T12:06:03.804Z","data":{"systemMessage":null,"humanInputMode":"ALWAYS","codeExecutionConfig":{"workDir":"coding","timeout":60,"functions":[]},"agentDefaultAutoReply":null,"maxConsecutiveAutoReply":10,"termination":{"type":"keyword","keywords":["TERMINATE"],"criterion":"ending","methodContent":""},"modelIds":[],"skills":[],"parentId":null,"nestedChats":[]},"id":"wa-PHrGKn4IzWMvZ7pKpsNMr","agentType":"user"}],"assistants":[{"type":"agent","name":"Assistant","description":"An assistant agent","tags":[],"requirements":[],"createdAt":"2024-09-27T16:50:20.229Z","updatedAt":"2024-10-28T21:00:33.917Z","data":{"systemMessage":"Only use the tools you have been provided with. Reply TERMINATE and when the task is done.","humanInputMode":"NEVER","codeExecutionConfig":false,"agentDefaultAutoReply":null,"maxConsecutiveAutoReply":null,"termination":{"type":"none","keywords":[],"criterion":null,"methodContent":null},"modelIds":["wm-bCOT_M9N0_CI88GQBvLjt"],"skills":[{"id":"ws-Y5Igwe6Cpfg5yS9TfeA7h","executorId":"wa-PHrGKn4IzWMvZ7pKpsNMr"}],"parentId":null,"nestedChats":[]},"id":"wa-374KHGuzTzE79ekjB1z7f","agentType":"assistant"}],"managers":[],"rag_users":[],"swarm_agents":[],"reasoning_agents":[]},"models":[{"id":"wm-bCOT_M9N0_CI88GQBvLjt","type":"model","name":"claude-3-5-sonnet-20240620","description":"Claude 3-5-sonnet-20240620","tags":[],"requirements":[],"createdAt":"2024-09-26T16:50:41.290Z","updatedAt":"2025-01-21T12:45:17.972Z","data":{"apiKey":"REPLACE_ME","apiType":"anthropic","apiVersion":null,"baseUrl":null,"temperature":0.5,"topP":null,"maxTokens":null,"defaultHeaders":{},"price":{"promptPricePer1k":null,"completionTokenPricePer1k":null}}}],"skills":[{"id":"ws-Y5Igwe6Cpfg5yS9TfeA7h","type":"skill","name":"search_tool","description":"Search tool using Tavily AI","tags":[],"requirements":[],"createdAt":"2024-09-15T21:45:01.116Z","updatedAt":"2025-01-21T12:45:58.403Z","data":{"content":"# filename: {search_tool}.py\n# pylint: disable=line-too-long\n\"\"\"Replace this with your code.\n\nmake sure a function with the same name\nas the skill is defined in the code.\n\"\"\"\n\nimport os\nfrom typing import Annotated\n\n\ndef search_tool(query: Annotated[str, \"The search query\"]) -> Annotated[str, \"The search results\"]:\n    \"\"\"Search tool using Tavily AI.\"\"\"\n\n    from tavily import TavilyClient\n\n    tavily = TavilyClient(api_key=os.environ[\"TAVILY_API_KEY\"])\n    return tavily.get_search_context(query=query, search_depth=\"advanced\")\n","secrets":{"TAVILY_API_KEY":"REPLACE_ME"}}}],"chats":[{"id":"we-l-SjEIQ_ikUhQpuXaJkuL","data":{"source":"wa-PHrGKn4IzWMvZ7pKpsNMr","target":"wa-374KHGuzTzE79ekjB1z7f","name":"User => Assistant","order":0,"description":"New connection","position":1,"clearHistory":true,"maxTurns":null,"message":{"type":"method","content":"\"\"\"Custom message function.\"\"\"\n# provide the message to be sent when the sender and the recipient are connected\n# complete the `callable_message` below. Do not change the name or the arguments of the function.\n# only complete the function body and the docstring and return the:\n# final message: (str) or a dictionary with the final message and additional data (dict)\n#\n# the recipient and the sender are 'autogen.ConversableAgent' objects\n# the context is generated from the sender's initiate_chat additional keyword arguments\n# example:\n# def callable_message(sender, recipient, context):\n#   # type: (ConversableAgent, ConversableAgent, dict) -> Union[str, Dict]\n#   carryover = context.get(\"carryover\", \"\")\n#    if isinstance(carryover, list):\n#        carryover = carryover[-1]\n#    final_msg = \"Write a blogpost.\" + \"\\nContext: \\n\" + carryover\n#    return final_msg\n#\ndef callable_message(sender, recipient, context):\n    \"\"\"Complete the message function\"\"\"\n    ReAct_prompt = \"\"\"\nAnswer the following questions as best you can. You have access to tools provided.\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take\nAction Input: the input to the action\nObservation: the result of the action\n... (this process can repeat multiple times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\nQuestion: {input}\n\"\"\"\n    return ReAct_prompt.format(input=context[\"question\"])\n","context":{"question":"What is the result of super bowl 2024?"},"use_carryover":false},"summary":{"method":"last_msg","prompt":"","args":{}},"nestedChat":{"message":null,"reply":null},"prerequisites":[],"maxRounds":20,"afterWork":null,"flowAfterWork":null,"available":{"type":"none","value":null},"contextVariables":{},"realSource":null,"realTarget":null}}],"isAsync":false}}