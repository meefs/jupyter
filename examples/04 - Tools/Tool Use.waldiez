{"id":"f0JUp9bBCt8AAQrJntZzYWUXQ0YAtJz2","type":"flow","storageId":"id-21f7e923-3747-463f-b7d5-b3d46a0a9efb","name":"Tool Use","description":"Tool Use and Conversational Chess","tags":[],"requirements":["chess"],"createdAt":"2025-01-30T09:01:36.734Z","updatedAt":"2025-01-30T09:01:42.002Z","data":{"nodes":[{"id":"wm-t_vD5lGSjjoY-IWJwJ0yi","type":"model","position":{"x":0,"y":10},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"ws-gI5GZqizESno9c_BT1J-G","type":"skill","position":{"x":0,"y":10},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"ws-m060JbKZ3VRuvZTpbBVl6","type":"skill","position":{"x":240,"y":10},"measured":{"width":182,"height":182},"selected":false,"hidden":true},{"id":"ws-1737445390327v55KHKkj6UBYsuuxlErZs","type":"skill","position":{"x":480,"y":10},"hidden":true,"measured":{"width":182,"height":182},"selected":false},{"id":"wa-kKZX2OUfPyN1SslGXEBDj","type":"agent","position":{"x":450,"y":600},"hidden":false,"measured":{"width":206,"height":231},"selected":true,"dragging":false},{"id":"wa-NYcOIumxAEznztdhowxRD","type":"agent","position":{"x":90,"y":330},"selected":false,"measured":{"width":206,"height":231},"dragging":false,"hidden":false},{"id":"wa-cQsBT78v6AgU-HExxtbXJ","type":"agent","position":{"x":810,"y":330},"hidden":false,"measured":{"width":206,"height":214},"selected":false,"dragging":false}],"edges":[{"id":"we--oxgu7r5qIy_gIZZIiVuX","source":"wa-NYcOIumxAEznztdhowxRD","target":"wa-kKZX2OUfPyN1SslGXEBDj","hidden":false,"animated":false,"selected":false,"style":{"stroke":"#bc76f5","strokeWidth":3},"markerEnd":{"type":"arrowclosed","color":"#bc76f5","width":10,"height":10},"sourceHandle":"agent-handle-right-source-wa-NYcOIumxAEznztdhowxRD","targetHandle":"agent-handle-left-target-wa-kKZX2OUfPyN1SslGXEBDj","type":"chat"},{"id":"we-J3q_SLeMusy6SxrFms2G4","source":"wa-kKZX2OUfPyN1SslGXEBDj","target":"wa-cQsBT78v6AgU-HExxtbXJ","hidden":false,"animated":true,"selected":false,"style":{"stroke":"#bc76f5","strokeWidth":3},"sourceHandle":"agent-handle-right-source-wa-kKZX2OUfPyN1SslGXEBDj","targetHandle":"agent-handle-left-target-wa-cQsBT78v6AgU-HExxtbXJ","type":"nested"},{"id":"we-s37jjtVdZtPa7foQOGOq0","source":"wa-NYcOIumxAEznztdhowxRD","target":"wa-cQsBT78v6AgU-HExxtbXJ","hidden":false,"animated":true,"selected":false,"style":{"stroke":"#bc76f5","strokeWidth":3},"sourceHandle":"agent-handle-right-source-wa-NYcOIumxAEznztdhowxRD","targetHandle":"agent-handle-left-target-wa-cQsBT78v6AgU-HExxtbXJ","type":"nested"}],"viewport":{"x":585.5,"y":-176,"zoom":1},"agents":{"users":[{"type":"agent","name":"Player White","description":"Player White","tags":[],"requirements":[],"createdAt":"2024-09-27T16:04:36.260Z","updatedAt":"2024-09-27T16:15:35.421Z","data":{"systemMessage":"You are a chess player and you play as white. First call get_legal_moves(), to get a list of legal moves. Then call make_move(move) to make a move.","humanInputMode":"NEVER","codeExecutionConfig":false,"agentDefaultAutoReply":null,"maxConsecutiveAutoReply":null,"termination":{"type":"none","keywords":[],"criterion":null,"methodContent":null},"modelIds":["wm-t_vD5lGSjjoY-IWJwJ0yi"],"skills":[{"id":"ws-m060JbKZ3VRuvZTpbBVl6","executorId":"wa-cQsBT78v6AgU-HExxtbXJ"},{"id":"ws-gI5GZqizESno9c_BT1J-G","executorId":"wa-cQsBT78v6AgU-HExxtbXJ"}],"parentId":null,"nestedChats":[{"triggeredBy":["wa-NYcOIumxAEznztdhowxRD"],"messages":[{"id":"we-J3q_SLeMusy6SxrFms2G4","isReply":true}]}]},"id":"wa-kKZX2OUfPyN1SslGXEBDj","agentType":"user"},{"type":"agent","name":"Player Black","description":"Player Black","tags":[],"requirements":[],"createdAt":"2024-09-27T16:04:36.260Z","updatedAt":"2024-09-27T16:11:00.170Z","data":{"systemMessage":"You are a chess player and you play as black. First call get_legal_moves(), to get a list of legal moves. Then call make_move(move) to make a move.","humanInputMode":"NEVER","codeExecutionConfig":false,"agentDefaultAutoReply":null,"maxConsecutiveAutoReply":null,"termination":{"type":"none","keywords":[],"criterion":null,"methodContent":null},"modelIds":["wm-t_vD5lGSjjoY-IWJwJ0yi"],"skills":[{"id":"ws-gI5GZqizESno9c_BT1J-G","executorId":"wa-cQsBT78v6AgU-HExxtbXJ"},{"id":"ws-m060JbKZ3VRuvZTpbBVl6","executorId":"wa-cQsBT78v6AgU-HExxtbXJ"}],"parentId":null,"nestedChats":[{"triggeredBy":["wa-kKZX2OUfPyN1SslGXEBDj"],"messages":[{"id":"we-s37jjtVdZtPa7foQOGOq0","isReply":true}]}]},"id":"wa-NYcOIumxAEznztdhowxRD","agentType":"user"}],"assistants":[{"type":"agent","name":"Board Proxy","description":"Board Proxy","tags":[],"requirements":[],"createdAt":"2024-09-27T16:06:31.961Z","updatedAt":"2024-09-28T11:42:54.735Z","data":{"systemMessage":null,"humanInputMode":"NEVER","codeExecutionConfig":false,"agentDefaultAutoReply":null,"maxConsecutiveAutoReply":null,"termination":{"type":"method","keywords":[],"criterion":"exact","methodContent":"\"\"\"Custom termination message function.\"\"\"\n# provide the function to check if the message is a termination message\n# complete the `is_termination_message` below. Do not change the name or the arguments of the function.\n# only complete the function body and the docstring and return True if the message is a termination message, False otherwise.\n# example:\n# def is_termination_message(message):\n#    # type: (dict[str, any]) -> bool\n#    return message.get(\"content\", \"\").lower() == \"terminate\"\n#\ndef is_termination_message(message):\n    # pylint: disable=global-statement, global-variable-undefined, import-outside-toplevel, redefined-outer-name\n    if \"MADE_MOVE\" not in globals():\n        globals()[\"MADE_MOVE\"] = False\n    global MADE_MOVE  # type: ignore\n    if MADE_MOVE is True:\n        MADE_MOVE = False\n        return True\n    return False\n"},"modelIds":[],"skills":[],"parentId":null,"nestedChats":[]},"id":"wa-cQsBT78v6AgU-HExxtbXJ","agentType":"assistant"}],"managers":[],"rag_users":[],"swarm_agents":[],"reasoning_agents":[]},"models":[{"id":"wm-t_vD5lGSjjoY-IWJwJ0yi","type":"model","name":"gpt-3.5-turbo","description":"OpenAI GPT-3.5","tags":[],"requirements":[],"createdAt":"2024-10-28T07:23:33.793Z","updatedAt":"2025-01-21T08:37:09.040Z","data":{"apiKey":"REPLACE_ME","apiType":"openai","apiVersion":null,"baseUrl":null,"temperature":0.5,"topP":null,"maxTokens":null,"defaultHeaders":{},"price":{"promptPricePer1k":null,"completionTokenPricePer1k":null}}}],"skills":[{"id":"ws-gI5GZqizESno9c_BT1J-G","type":"skill","name":"get_legal_moves","description":"Get a list of legal chess moves.","tags":[],"requirements":[],"createdAt":"2024-09-27T15:59:59.195Z","updatedAt":"2025-01-21T07:44:59.171Z","data":{"content":"# filename: {get_legal_moves}.py\n\"\"\"Replace this with your code.\n\nmake sure a function with the same name\nas the skill is defined in the code.\n\"\"\"\n# pylint: disable=global-statement\nfrom typing import Annotated\n\nimport chess\n\n\ndef get_legal_moves() -> Annotated[str, \"A list of legal moves in UCI format\"]:\n    \"\"\"Get a list of legal moves.\"\"\"\n    return \"Possible moves are: \" + \",\".join(\n        [str(move) for move in BOARD.legal_moves]\n    )\n","secrets":{}}},{"id":"ws-m060JbKZ3VRuvZTpbBVl6","type":"skill","name":"make_move","description":"Make a move on the board.","tags":[],"requirements":[],"createdAt":"2024-09-27T16:01:14.292Z","updatedAt":"2025-01-21T07:45:29.111Z","data":{"content":"# filename: {make_move}.py\n\"\"\"Replace this with your code.\n\nmake sure a function with the same name\nas the skill is defined in the code.\n\"\"\"\n# pylint: disable=global-statement,unused-import\nfrom typing import Annotated\n\nimport chess\n\n\ndef make_move(\n    move: Annotated[str, \"A move in UCI format.\"],\n) -> Annotated[str, \"Result of the move.\"]:\n    \"\"\"Make a move on the board.\"\"\"\n    global MADE_MOVE\n    try:\n        move = chess.Move.from_uci(move)\n    except BaseException:  # pylint: disable=broad-except\n        move = BOARD.parse_san(move)\n    BOARD.push_uci(str(move))\n    # Get the piece name.\n    piece = BOARD.piece_at(move.to_square)\n    piece_symbol = piece.unicode_symbol()\n    piece_name = (\n        chess.piece_name(piece.piece_type).capitalize()\n        if piece_symbol.isupper()\n        else chess.piece_name(piece.piece_type)\n    )\n    MADE_MOVE = True\n    return f\"Moved {piece_name} ({piece_symbol}) from \"\\\n        f\"{chess.SQUARE_NAMES[move.from_square]} to \"\\\n        f\"{chess.SQUARE_NAMES[move.to_square]}.\"\n","secrets":{}}},{"id":"ws-1737445390327v55KHKkj6UBYsuuxlErZs","type":"skill","name":"waldiez_shared","description":"Shared code to be placed before other skills.","tags":[],"requirements":[],"createdAt":"2025-01-21T07:43:10.327Z","updatedAt":"2025-01-21T07:51:14.785Z","data":{"content":"from typing import Annotated\n\nimport chess\nimport chess.svg\n\nBOARD = chess.Board()\nMADE_MOVE = False\n","secrets":{}}}],"chats":[{"id":"we--oxgu7r5qIy_gIZZIiVuX","data":{"source":"wa-NYcOIumxAEznztdhowxRD","target":"wa-kKZX2OUfPyN1SslGXEBDj","name":"Player Black => Player White","order":0,"description":"New connection","position":1,"clearHistory":true,"maxTurns":2,"message":{"type":"string","content":"Let's play chess! Your move.","context":{},"use_carryover":false},"summary":{"method":"last_msg","prompt":"","args":{}},"nestedChat":{"message":null,"reply":null},"prerequisites":[],"maxRounds":20,"afterWork":null,"flowAfterWork":null,"available":{"type":"none","value":null},"contextVariables":{},"realSource":null,"realTarget":null}},{"id":"we-J3q_SLeMusy6SxrFms2G4","data":{"source":"wa-kKZX2OUfPyN1SslGXEBDj","target":"wa-cQsBT78v6AgU-HExxtbXJ","name":"Player White => Board Proxy","order":-1,"description":"New connection","position":1,"clearHistory":true,"maxTurns":null,"message":{"type":"none","content":null,"context":{},"use_carryover":false},"summary":{"method":"last_msg","prompt":"","args":{}},"nestedChat":{"message":null,"reply":null},"prerequisites":[],"maxRounds":20,"afterWork":null,"flowAfterWork":null,"available":{"type":"none","value":null},"contextVariables":{},"realSource":null,"realTarget":null}},{"id":"we-s37jjtVdZtPa7foQOGOq0","data":{"source":"wa-NYcOIumxAEznztdhowxRD","target":"wa-cQsBT78v6AgU-HExxtbXJ","name":"Player Black => Board Proxy","order":-1,"description":"New connection","position":1,"clearHistory":true,"maxTurns":null,"message":{"type":"none","content":null,"context":{},"use_carryover":false},"summary":{"method":"last_msg","prompt":"","args":{}},"nestedChat":{"message":null,"reply":null},"prerequisites":[],"maxRounds":20,"afterWork":null,"flowAfterWork":null,"available":{"type":"none","value":null},"contextVariables":{},"realSource":null,"realTarget":null}}],"isAsync":false}}